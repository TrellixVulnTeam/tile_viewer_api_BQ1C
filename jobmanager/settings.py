"""
Django settings for jobmanager project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
from datetime import timedelta
import logging
import os
from pathlib import Path
import yaml

from common.utils import ConfigFileProblem, ConfigValueMissing

API_VERSION = "0.3.1"

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
CONFIG_PATH = Path(BASE_DIR, "config.yaml")

# Used for creating links to jobs in email notifications, don't forget to change this!
BASE_URL = "http://s2d2.kub-eo.agr.gc.ca"

if os.environ.get("DEVELOPMENT") is not None:
    CONFIG_PATH = Path(BASE_DIR, "config_dev.yaml")

# Logging
module_logger = logging.getLogger(__name__)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "detailed": {
            "class": "logging.Formatter",
            "format": "%(asctime)s %(name)-15s %(levelname)-8s %(processName)-10s %(message)s",
        }
    },
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": Path(BASE_DIR, "media", "debug.log"),
            "formatter": "detailed",
        },
        "console": {
            "class": "logging.StreamHandler",
            "level": "DEBUG",
            "formatter": "detailed",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "celery.task": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "s2d2_app.views": {
            "handlers": ["file", "console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "api_v1.views": {
            "handlers": ["file", "console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "api_v1.tasks": {
            "handlers": ["file", "console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "worker.tasks.download_s2": {
            "handlers": ["file", "console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "worker.tasks.sen2agri_tasks": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# Load config from config.yaml
try:
    with open(CONFIG_PATH, "r") as stream:
        config = yaml.safe_load(stream)
except yaml.YAMLError as exc:
    module_logger.error("Problem loading config... exiting...")
    raise ConfigFileProblem
except FileNotFoundError as e:
    module_logger.error(f"Missing config file with path {CONFIG_PATH}")
    raise e
except BaseException as e:
    module_logger.error("Unknown problem occurred while loading config")

REQUIRED_CONFIG_KEYS = [
    "S3_URL",
    "S3_ACCESS_KEY",
    "S3_SECRET_KEY",
    "S3_REGION",
    "PSQL_DB",
    "PSQL_DB_USER",
    "PSQL_DB_PASS",
    "PSQL_DB_URL",
    "PSQL_DB_PORT",
    "USGS_EE_USER",
    "USGS_EE_PASS",
    "ESA_SCIHUB_USER",
    "ESA_SCIHUB_PASS",
    "DJANGO_SETTINGS_MODULE",
    "RABBIT_MQ_USER",
    "RABBIT_MQ_PASS",
    "RABBIT_MQ_URL",
    "RABBIT_MQ_PORT",
    "DJANGO_SECRET",
    "REDIS_HOST",
    "REDIS_PASS",
    "REDIS_PORT",
    "MAILGUN_API_URL",
    "MAILGUN_API_KEY",
    "BUCKET_SUFFIX",
]

module_logger.debug(config.keys())

try:
    config.keys()
except AttributeError as e:
    raise ConfigFileProblem

# Find the difference between sets
# required_config_keys can be a sub set of config.keys()
missing_keys = set(REQUIRED_CONFIG_KEYS) - set(list(config.keys()))

if len(list(missing_keys)) != 0:
    module_logger.error(f"Config file loaded but missing critical vars, {missing_keys}")
    raise ConfigValueMissing(",".join(list(missing_keys)))

# Unique suffix for S3 buckets to make it unique
BUCKET_SUFFIX = config["BUCKET_SUFFIX"]

# S3 Config for S3Utils
S3_CONFIG = {
    "S3_URL": config["S3_URL"],
    "S3_ACCESS_KEY": config["S3_ACCESS_KEY"],
    "S3_SECRET_KEY": config["S3_SECRET_KEY"],
    "S3_REGION": config["S3_REGION"],
}

# ESA Config
ESA_SCIHUB_CONFIG = {
    "USER": config["ESA_SCIHUB_USER"],
    "PASS": config["ESA_SCIHUB_PASS"],
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config["DJANGO_SECRET"]

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "zeus684440.agr.gc.ca",
    "hal678772.agr.gc.ca",
    "onottra669807d-l.agr.gc.ca",
    "onottra684442d-l.agr.gc.ca",
    "10.111.85.184",
    "*",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "api_v1.views.CustomEmailAuthBackend",
]

# Application definition

INSTALLED_APPS = [
    "corsheaders",
    "django_celery_results",
    "django_celery_beat",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "s2d2_app",
    "django_filters",
    "api_v1",
    "worker",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "jobmanager.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "jobmanager.wsgi.application"

# Database

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": config["PSQL_DB"],
        "USER": config["PSQL_DB_USER"],
        "PASSWORD": config["PSQL_DB_PASS"],
        "HOST": config["PSQL_DB_URL"],
        "PORT": config["PSQL_DB_PORT"],
    }
}

# Use email as primary user id
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# api_v1 settings
SERVER_CODE = "aafc"

# Cors headers config
CORS_ORIGIN_ALLOW_ALL = True

# Celery Config
CELERY_RESULT_BACKEND = "django-db"
CELERY_CACHE_BACKEND = "django-cache"

CELERY_BROKER_URL = f"amqp://{config['RABBIT_MQ_USER']}:{config['RABBIT_MQ_PASS']}@{config['RABBIT_MQ_URL']}:{config['RABBIT_MQ_PORT']}/"

# CELERY_RESULT_BACKEND = 'rpc://'
CELERY_TASK_SERIALIZER = "json"
# result_serializer = 'json'
CELERY_ACCEPT_JSON = ["json"]
# timezone = 'Europe/Oslo'
CELERY_ENABLE_UTC = True

CELERY_TASK_TRACK_STARTED = True

# Enables extended task attributes to be written to the backend
CELERY_RESULT_EXTENDED = True

SIMPLE_JWT = {
    "USER_ID_FIELD": "email",
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=180),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=10),
}

# routes can be specified as a dictionary
# task_routes = {
#     'tasks.bulk_submit_fetch_l8': {
#         'queue': 'agricarta_downloads'
#     }
# }
# OR
# routes can be specified as a list of tuples
CELERY_TASK_ROUTES = {
    "api_v1.tasks.bulk_fetch_l8": {"queue": "periodic"},
    "api_v1.tasks.bulk_submit_l8": {"queue": "periodic"},
    "api_v1.tasks.check_jobs": {"queue": "periodic"},
    "api_v1.tasks.check_offline_queues_for_all_users": {"queue": "periodic"},
    "api_v1.tasks.start_s2_batch_job": {"queue": "periodic"},
    "api_v1.tasks.start_l8_batch_job": {"queue": "periodic"},
    "worker.tasks.sen2agri_tasks.check_for_l2a_jobs": {"queue": "periodic"},
    "worker.tasks.sen2agri_tasks_l3a.generate_l3a": {"queue": "sen2agri"},
    "worker.tasks.sen2agri_tasks_l3b.create_l3b_monodate": {"queue": "sen2agri"},
    "api_v1.tasks.add_numbers": {"queue": "default"},
    "jobmanager.celery.debug_task": {"queue": "default"},
    "jobmanager.celery.add_numbers2": {"queue": "default"},
    "api_v1.tasks.debug_shared_task": {"queue": "default"},
    "worker.tasks.download_s2.download_s2": {"queue": "downloader"},
    "worker.tasks.download_l8.download_l8": {"queue": "downloader"},
    "worker.tasks.download_l8.download_l8_bulk_order": {"queue": "downloader"},
    "api_v1.tasks.l8_batch_download": {"queue": "downloader"},
    "worker.tasks.sen2agri_tasks.start_l2a_job": {"queue": "sen2agri"},
    "worker.tasks.sen2agri_tasks.create_l2a_imagery_for_tile": {"queue": "sen2agri"},
}

CELERYBEAT_SCHEDULER = "django_celery_beat.schedulers.DatabaseScheduler"

CELERY_TASK_EAGER_PROPAGATES = True

# Redis settings
REDIS_HOST = config["REDIS_HOST"]
REDIS_PORT = config["REDIS_PORT"]
REDIS_PASS = config["REDIS_PASS"]

# Mailgun settings
MAILGUN_API_URL = config["MAILGUN_API_URL"]
MAILGUN_API_KEY = config["MAILGUN_API_KEY"]

# # If in dev mode
if os.environ.get("DEVELOPMENT") is not None:
    DEBUG = True
    DEVELOPMENT_MODE = True
